import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the datasets
train_data = pd.read_csv('fraudtrain.csv')
test_data = pd.read_csv('fraudtest.csv')

# Display dataset information
print(train_data.info())
print(train_data.head())

# Target column
target = 'is_fraud'

# Drop irrelevant columns
irrelevant_columns = ['Unnamed: 0', 'trans_date_trans_time']  

train_data = train_data.drop(columns=irrelevant_columns, errors='ignore')
test_data = test_data.drop(columns=irrelevant_columns, errors='ignore')

# Separate features and target
X_train = train_data.drop(columns=[target])
y_train = train_data[target]
X_test = test_data.drop(columns=[target])
y_test = test_data[target]

# Encode categorical features
categorical_columns = X_train.select_dtypes(include=['object']).columns
for col in categorical_columns:
    X_train[col] = LabelEncoder().fit_transform(X_train[col])
    X_test[col] = LabelEncoder().fit_transform(X_test[col])

# Scaling numeric features
scaler = StandardScaler()
X_train[X_train.select_dtypes(include=['float64']).columns] = scaler.fit_transform(X_train.select_dtypes(include=['float64']))
X_test[X_test.select_dtypes(include=['float64']).columns] = scaler.transform(X_test.select_dtypes(include=['float64']))

# Train Random Forest Classifier with optimized parameters
rf_classifier = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)
rf_classifier.fit(X_train, y_train)

# Predict and evaluate
y_pred = rf_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Random Forest Accuracy: {accuracy}")
print(f"Confusion Matrix:\n{conf_matrix}")
print(f"Classification Report:\n{class_report}")
