import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

plt.switch_backend('Agg')  

try:
    data = pd.read_csv('spam.csv', encoding='utf-8')
except UnicodeDecodeError:
    data = pd.read_csv('spam.csv', encoding='latin1')
print("\nSPAM SMS DETECTION\n")

print(data.columns)


data.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], errors='ignore', inplace=True)


data.columns = ['Label', 'Message']


data['Label'] = data['Label'].map({'spam': 1, 'ham': 0})

# Split data into train and test sets
X = data['Message']
y = data['Label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# TF-IDF Vectorization
tfidf = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Model Selection
models = {
    'Naive Bayes': MultinomialNB(),
    'Logistic Regression': LogisticRegression(max_iter=200),
    'SVM': SVC(kernel='linear')
}

# Train and evaluate models
results = {}
for model_name, model in models.items():
    model.fit(X_train_tfidf, y_train)
    y_pred = model.predict(X_test_tfidf)
    acc = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    results[model_name] = (acc, report)

    print(f"\n{model_name} Accuracy: {acc:.4f}")
    print(f"\n{model_name} Classification Report:\n{report}\n")
    print("----------")


plt.bar(results.keys(), [res[0] for res in results.values()], color=['pink','gray','skyblue'])
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.title('Spam SMS Detection Model Comparison')
plt.savefig('model_comparison.png')  
